package ui

const (
	classTooltip = "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"
)

templ Tooltip() {
	<div
		x-data="{
        tooltipVisible: false,
    }"
		x-init="$refs.content.addEventListener('mouseenter', () => { tooltipVisible = true; }); $refs.content.addEventListener('mouseleave', () => { tooltipVisible = false; });"
		class="relative"
	>
		<div x-ref="content">
			{ children... }
		</div>
	</div>
}

type TooltipProps struct {
	Title string
	Side  string
}

func tooltipSide(side string) string {
	switch side {
	case "top":
		return "absolute top-0 left-1/2 -translate-x-1/2 -mt-0.5 -translate-y-full"
	case "left":
		return "absolute top-1/2 -translate-y-1/2 -ml-0.5 left-0 -translate-x-full"
	case "right":
		return "absolute top-1/2 -translate-y-1/2 -mr-0.5 right-0 translate-x-full"
	case "bottom":
		return "absolute bottom-0 left-1/2 -translate-x-1/2 -mb-0.5 translate-y-full"
	default:
		return "absolute top-0 left-1/2 -translate-x-1/2 -mt-0.5 -translate-y-full"
	}
}

templ TooltipContent(props TooltipProps) {
	<span x-ref="tooltip" x-show="tooltipVisible" data-side={ props.Side } class={ classTooltip, tooltipSide(props.Side) }>{ props.Title }</span>
}
